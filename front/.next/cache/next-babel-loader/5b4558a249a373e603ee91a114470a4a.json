{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction logInAPI(data) {// return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction* watchLogIne() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nexport default function* usersSaga() {\n  yield all([fork(watchLogIne)]);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","logInAPI","data","logIn","action","type","err","console","error","reponse","watchLogIne","usersSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,QAA+D,kBAA/D;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACrB;AACF;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAEN,cADA;AAENG,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMI,GAAN,EAAW;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAEL,cADA;AAENQ,MAAAA,KAAK,EAAEF,GAAG,CAACG,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,WAAV,GAAwB;AACpB,QAAMf,UAAU,CAACG,cAAD,EAAiBK,KAAjB,CAAhB;AACH;;AAED,eAAe,UAAUQ,SAAV,GAAsB;AACjC,QAAMpB,GAAG,CAAE,CACPE,IAAI,CAACiB,WAAD,CADG,CAAF,CAAT;AAGH","sourcesContent":["import { all, delay, fork, put, takeLatest, call} from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\n\nfunction logInAPI(data) {\n   // return axios.post('/user/login', data);\n}\n\nfunction* logIn(action){\n    try{\n        //const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch(err) {\n        console.error(err);\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.reponse.data,\n        });\n    }\n}\n\nfunction* watchLogIne() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nexport default function* usersSaga() {\n    yield all ([\n        fork(watchLogIne),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}