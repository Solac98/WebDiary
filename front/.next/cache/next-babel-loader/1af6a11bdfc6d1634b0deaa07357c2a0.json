{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sol/google/Project/SolarSeed/front/pages/allcalendar.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Calendar, Badge, DatePicker, Space, Input, Button } from 'antd';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { ADD_CALENDAR_REQUEST, LOAD_CALENDAR_REQUEST, REMOVE_CALENDAR_REQUEST } from '../reducers/calendar';\n\nvar AllCalendar = function AllCalendar() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.calendar;\n  }),\n      calendar = _useSelector2.calendar;\n\n  useEffect(function () {\n    if (!isLoggedIn) {\n      return Router.push('/login');\n    }\n\n    dispatch({\n      type: LOAD_CALENDAR_REQUEST\n    });\n  }, [isLoggedIn]);\n\n  if (!isLoggedIn) {\n    return '내 정보 로딩중...';\n  }\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useState2 = useState('2021-01-01'),\n      selectDate = _useState2[0],\n      setSelectDate = _useState2[1];\n\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, [text]);\n\n  function getListData(value) {\n    var listData = calendar.filter(function (v) {\n      return v.date === value;\n    });\n    return listData || [];\n  }\n\n  var onSelect = useCallback(function (e) {\n    console.log(e.format('YYYY-MM-DD'));\n    setSelectDate(e.format('YYYY-MM-DD'));\n  }, [selectDate]); //temp\n\n  var onPanelChange = function onPanelChange() {\n    console.log('달 페이지 바뀌었음!');\n  }; //temp\n\n\n  var dateCellRender = useCallback(function (value) {\n    var listData = getListData(value.format('YYYY-MM-DD'));\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        paddingInlineStart: '0'\n      },\n      className: \"events\",\n      children: listData.map(function (item) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            listStyle: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            status: item.type,\n            text: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, _this)\n        }, item.content, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, _this);\n  }, [calendar]);\n\n  var onChangeCal = function onChangeCal(date, dateString) {\n    setSelectDate(dateString);\n  }; //달력에 추가\n\n\n  var onSubmit = useCallback(function () {\n    var plus = {\n      date: selectDate,\n      type: 'success',\n      content: text\n    }; //임시로 id인덱스 부여, 디비 작업시 id 자동\n\n    console.log(plus);\n    dispatch({\n      type: ADD_CALENDAR_REQUEST,\n      data: plus\n    });\n    console.log(calendar);\n  }, [selectDate, text, calendar]); //달력에 추가한거 삭제\n\n  var onDelete = useCallback(function () {\n    var deleteData = calendar.filter(function (e) {\n      return e.date === selectDate && e.content === text;\n    });\n    console.log(deleteData);\n\n    if (deleteData.length) {\n      dispatch({\n        type: REMOVE_CALENDAR_REQUEST,\n        data: {\n          date: selectDate,\n          content: deleteData\n        }\n      });\n    } else {\n      alert(\"날짜 또는 데이터를 확인하세요\");\n    }\n  }, [selectDate, calendar,,\n  /*tempData*/\n  text]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n        charSet: \"utf-8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, _this), isLoggedIn && /*#__PURE__*/_jsxDEV(AppLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Space, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(DatePicker, {\n          style: {\n            marginTop: '10px'\n          },\n          placeholder: selectDate,\n          onChange: onChangeCal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"\\uB2EC\\uB825\\uC5D0 \\uAE30\\uB85D\\uD558\\uC138\\uC694!\",\n        style: {\n          width: '300px',\n          marginTop: '10px'\n        },\n        name: \"text\",\n        value: text,\n        type: \"text\",\n        onChange: onChangeText,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: '10px'\n        },\n        onClick: onSubmit,\n        children: \"\\uC785\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: '10px'\n        },\n        onClick: onDelete,\n        children: \"\\uC0AD\\uC81C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Calendar, {\n        dateCellRender: dateCellRender,\n        onPanelChange: onPanelChange,\n        onSelect: onSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(AllCalendar, \"hGCmCkRZ0QrnWt+R1LdbHklkPVs=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AllCalendar;\nexport default AllCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllCalendar\");","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/pages/allcalendar.js"],"names":["React","useState","useCallback","useEffect","AppLayout","useDispatch","useSelector","Calendar","Badge","DatePicker","Space","Input","Button","Head","Router","ADD_CALENDAR_REQUEST","LOAD_CALENDAR_REQUEST","REMOVE_CALENDAR_REQUEST","AllCalendar","dispatch","state","user","isLoggedIn","calendar","push","type","text","setText","selectDate","setSelectDate","onChangeText","e","target","value","getListData","listData","filter","v","date","onSelect","console","log","format","onPanelChange","dateCellRender","paddingInlineStart","map","item","listStyle","content","onChangeCal","dateString","onSubmit","plus","data","onDelete","deleteData","length","alert","marginTop","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect} from 'react';\nimport AppLayout from '../components/AppLayout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Calendar, Badge, DatePicker, Space, Input, Button } from 'antd';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { ADD_CALENDAR_REQUEST, LOAD_CALENDAR_REQUEST, REMOVE_CALENDAR_REQUEST } from '../reducers/calendar';\nconst AllCalendar = () => {\n    const dispatch = useDispatch();\n    const{ isLoggedIn} = useSelector((state) => state.user);\n    const { calendar } = useSelector((state) => state.calendar);\n    \n    useEffect(() => {\n        if(!isLoggedIn){\n            return Router.push('/login');\n        }\n        dispatch({\n          type: LOAD_CALENDAR_REQUEST,\n        });\n    }, [isLoggedIn]);\n\n    if (!isLoggedIn) {\n      return '내 정보 로딩중...';\n  }\n\n    const [text, setText] = useState('');\n    const [selectDate, setSelectDate] = useState('2021-01-01');\n\n    const onChangeText = useCallback((e) => {\n      setText(e.target.value);\n    }, [text]);\n\n    function getListData(value) { \n        let listData = calendar.filter((v) => v.date === value);\n        return listData || [];\n      }\n\n    const onSelect = useCallback((e) => {\n      console.log(e.format('YYYY-MM-DD'));\n      setSelectDate(e.format('YYYY-MM-DD'));\n    }, [selectDate]);\n\n    //temp\n    const onPanelChange = () => {\n      console.log('달 페이지 바뀌었음!');\n    }\n    //temp\n    const dateCellRender = useCallback((value) => {\n      const listData = getListData(value.format('YYYY-MM-DD'));\n      return (\n      <ul style={{paddingInlineStart: '0'}} className=\"events\">\n      {listData.map(item => (\n        <li style={{listStyle: 'none'}} key={item.content}>\n          <Badge status={item.type} text={item.content} />\n        </li>\n      ))}\n    </ul>\n    );\n  }, [calendar]);\n    const onChangeCal = (date, dateString) => {\n      setSelectDate(dateString);\n    }\n    //달력에 추가\n    const onSubmit = useCallback((() => {\n      const plus = { date: selectDate, type: 'success', content: text};\n      //임시로 id인덱스 부여, 디비 작업시 id 자동\n      console.log(plus);\n      dispatch({\n        type: ADD_CALENDAR_REQUEST,\n        data: plus,\n      });\n      console.log(calendar);\n    }), [ selectDate, text, calendar]);\n    //달력에 추가한거 삭제\n    const onDelete = useCallback((() => {\n      const deleteData = calendar.filter((e) => e.date === selectDate && e.content === text);\n      console.log(deleteData);\n      if(deleteData.length){\n        dispatch({\n          type: REMOVE_CALENDAR_REQUEST,\n          data: {\n            date: selectDate,\n            content: deleteData,\n          },\n        });\n      } else {\n        alert(\"날짜 또는 데이터를 확인하세요\");\n      }\n      \n    }), [selectDate, calendar,/*tempData*/, text]);\n\n    return(\n        <>\n            <Head>\n                <meta charSet=\"utf-8\"/>\n                <title>Calendar</title>\n            </Head>\n            { isLoggedIn && <AppLayout>\n                <Space direction=\"horizontal\">\n                  <DatePicker style={{marginTop: '10px'}} placeholder={selectDate} onChange={onChangeCal} />\n                </Space>\n                <Input placeholder=\"달력에 기록하세요!\" style={{width: '300px', marginTop: '10px'}} name=\"text\" value={text} type=\"text\" onChange={onChangeText} required />\n                <Button style={{marginTop: '10px'}} onClick={onSubmit}>입력</Button>\n                <Button style={{marginTop: '10px'}} onClick={onDelete}>삭제</Button>\n                <Calendar dateCellRender={dateCellRender} onPanelChange={onPanelChange} onSelect={onSelect}/>\n            </AppLayout>}\n        </>\n    );\n}\n\nexport default AllCalendar;"]},"metadata":{},"sourceType":"module"}