{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_DIARY_REQUEST, ADD_DIARY_SUCCESS, ADD_DIARY_FAILURE, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, LOAD_DIARY_REQUEST, LOAD_DIARY_SUCCESS, LOAD_DIARY_FAILURE, DELETE_DIARY_REQUEST, DELETE_DIARY_SUCCESS, DELETE_DIARY_FAILURE, UPDATE_DIARY_REQUEST, UPDATE_DIARY_SUCCESS, UPDATE_DIARY_FAILURE } from '../reducers/diary';\n\nfunction uplodaImagesAPI(data) {\n  return axios.post('/diary/images', data);\n}\n\nfunction* uplodaImages(action) {\n  try {\n    const result = yield call(uplodaImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction addDiaryAPI(data) {\n  return axios.post('/diary', data);\n}\n\nfunction* addDiary(action) {\n  try {\n    const result = yield call(addDiaryAPI, action.data);\n    yield put({\n      type: ADD_DIARY_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_DIARY_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction updateDiaryAPI(data) {\n  return axios.put('/diary/update', data);\n}\n\nfunction* updateDiary(action) {\n  try {\n    const result = yield call(updateDiaryAPI, action.data);\n    yield put({\n      type: UPDATE_DIARY_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: UPDATE_DIARY_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadDiaryAPI(data) {\n  return axios.post('/diary/load', data);\n}\n\nfunction* loadDiary(action) {\n  try {\n    const result = yield call(loadDiaryAPI, action.data);\n    yield put({\n      type: LOAD_DIARY_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_DIARY_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction deleteDiaryAPI(data) {\n  return axios.delete(`/diary/${data}`);\n}\n\nfunction* deleteDiary(action) {\n  try {\n    const result = yield call(deleteDiaryAPI, action.data);\n    yield put({\n      type: DELETE_DIARY_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: DELETE_DIARY_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uplodaImages);\n}\n\nfunction* watchAddDiary() {\n  yield takeLatest(ADD_DIARY_REQUEST, addDiary);\n}\n\nfunction* watchLoadDiary() {\n  yield takeLatest(LOAD_DIARY_REQUEST, loadDiary);\n}\n\nfunction* watchDeleteDiary() {\n  yield takeLatest(DELETE_DIARY_REQUEST, deleteDiary);\n}\n\nfunction* watchUpdateDiary() {\n  yield takeLatest(UPDATE_DIARY_REQUEST, updateDiary);\n}\n\nexport default function* diarySaga() {\n  yield all([fork(watchUploadImages), fork(watchAddDiary), fork(watchLoadDiary), fork(watchDeleteDiary), fork(watchUpdateDiary)]);\n}","map":{"version":3,"sources":["/Users/sol/Desktop/Project/SolarSeed/front/sagas/diary.js"],"names":["axios","all","fork","put","takeLatest","throttle","call","ADD_DIARY_REQUEST","ADD_DIARY_SUCCESS","ADD_DIARY_FAILURE","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","LOAD_DIARY_REQUEST","LOAD_DIARY_SUCCESS","LOAD_DIARY_FAILURE","DELETE_DIARY_REQUEST","DELETE_DIARY_SUCCESS","DELETE_DIARY_FAILURE","UPDATE_DIARY_REQUEST","UPDATE_DIARY_SUCCESS","UPDATE_DIARY_FAILURE","uplodaImagesAPI","data","post","uplodaImages","action","result","type","error","console","response","addDiaryAPI","addDiary","updateDiaryAPI","updateDiary","loadDiaryAPI","loadDiary","deleteDiaryAPI","delete","deleteDiary","watchUploadImages","watchAddDiary","watchLoadDiary","watchDeleteDiary","watchUpdateDiary","diarySaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call} from 'redux-saga/effects';\nimport { ADD_DIARY_REQUEST, ADD_DIARY_SUCCESS, ADD_DIARY_FAILURE, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, LOAD_DIARY_REQUEST, LOAD_DIARY_SUCCESS, LOAD_DIARY_FAILURE, DELETE_DIARY_REQUEST, DELETE_DIARY_SUCCESS, DELETE_DIARY_FAILURE, UPDATE_DIARY_REQUEST, UPDATE_DIARY_SUCCESS, UPDATE_DIARY_FAILURE } from '../reducers/diary';\n\nfunction uplodaImagesAPI(data){\n    return axios.post('/diary/images', data);\n}\n\nfunction* uplodaImages(action){\n    try {\n        const result = yield call(uplodaImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction addDiaryAPI(data){\n    return axios.post('/diary', data);\n}\n\nfunction* addDiary(action){\n    try {\n        const result = yield call(addDiaryAPI, action.data);\n        yield put({\n            type: ADD_DIARY_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: ADD_DIARY_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction updateDiaryAPI(data){\n    return axios.put('/diary/update', data);\n}\n\nfunction* updateDiary(action) {\n    try {\n        const result = yield call(updateDiaryAPI, action.data);\n        yield put({\n            type: UPDATE_DIARY_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: UPDATE_DIARY_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction loadDiaryAPI(data){\n    return axios.post('/diary/load', data);\n}\n\nfunction* loadDiary(action){\n    try {\n        const result = yield call(loadDiaryAPI, action.data);\n        yield put({\n            type: LOAD_DIARY_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOAD_DIARY_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction deleteDiaryAPI(data){\n    return axios.delete(`/diary/${data}`);\n}\n\nfunction* deleteDiary(action){\n    try {\n        const result = yield call(deleteDiaryAPI, action.data)\n        yield put({\n            type: DELETE_DIARY_SUCCESS,\n        });\n    } catch (error) {\n        yield put({\n            type: DELETE_DIARY_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchUploadImages(){\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uplodaImages);\n}\n\nfunction* watchAddDiary() {\n    yield takeLatest(ADD_DIARY_REQUEST, addDiary);\n}\n\nfunction* watchLoadDiary(){\n    yield takeLatest(LOAD_DIARY_REQUEST, loadDiary);\n}\n\nfunction* watchDeleteDiary(){\n    yield takeLatest(DELETE_DIARY_REQUEST, deleteDiary);\n}\n\nfunction* watchUpdateDiary(){\n    yield takeLatest(UPDATE_DIARY_REQUEST, updateDiary);\n}\n\nexport default function* diarySaga() {\n    yield all([\n        fork(watchUploadImages),\n        fork(watchAddDiary),\n        fork(watchLoadDiary),\n        fork(watchDeleteDiary),\n        fork(watchUpdateDiary),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}