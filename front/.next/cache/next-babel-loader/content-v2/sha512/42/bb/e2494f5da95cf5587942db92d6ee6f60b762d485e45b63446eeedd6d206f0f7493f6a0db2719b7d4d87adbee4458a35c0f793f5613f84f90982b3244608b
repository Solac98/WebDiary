{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addBucket),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddBucket),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removeBucket),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveBucket),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(bucketSaga);\n\nimport { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n  return axios.post('/bucket', data);\n}\n\nfunction addBucket(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addBucket$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addBucketAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_BUCKET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_BUCKET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddBucket() {\n  return _regeneratorRuntime.wrap(function watchAddBucket$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_BUCKET_REQUEST, addBucket);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction removebucketAPI(data) {\n  return axios[\"delete\"](\"/bucket/\".concat(data.id));\n}\n\nfunction removeBucket(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removeBucket$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removebucketAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: REMOVE_BUCKET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: REMOVE_BUCKET_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchRemoveBucket() {\n  return _regeneratorRuntime.wrap(function watchRemoveBucket$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function bucketSaga() {\n  return _regeneratorRuntime.wrap(function bucketSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddBucket), //fork(watchLoadBucket),\n          fork(watchRemoveBucket)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/bucket.js"],"names":["addBucket","watchAddBucket","removeBucket","watchRemoveBucket","bucketSaga","all","fork","takeLatest","call","put","ADD_BUCKET_FAILURE","ADD_BUCKET_SUCCESS","ADD_BUCKET_REQUEST","REMOVE_BUCKET_REQUEST","REMOVE_BUCKET_SUCCESS","REMOVE_BUCKET_FAILURE","axios","addBucketAPI","data","post","action","result","type","error","response","removebucketAPI","id"],"mappings":";;oDAQUA,S;qDAeAC,c;qDAQAC,Y;qDAeAC,iB;qDAGeC,U;;AAjDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,EAAqEC,qBAArE,EAA4FC,qBAA5F,EAAmHC,qBAAnH,QAAgJ,oBAAhJ;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,SAAX,EAAsBD,IAAtB,CAAP;AACH;;AAED,SAAUlB,SAAV,CAAoBoB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMZ,IAAI,CAACS,YAAD,EAAeG,MAAM,CAACF,IAAtB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMZ,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAEX,kBADA;AAENO,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMT,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAEZ,kBADA;AAENa,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeN;AAFhB,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUjB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACK,kBAAD,EAAqBZ,SAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASyB,eAAT,CAAyBP,IAAzB,EAA+B;AAC3B,SAAOF,KAAK,UAAL,mBAAwBE,IAAI,CAACQ,EAA7B,EAAP;AACH;;AAED,SAAUxB,YAAV,CAAuBkB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMZ,IAAI,CAACiB,eAAD,EAAkBL,MAAM,CAACF,IAAzB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMZ,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAER,qBADA;AAENI,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMT,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAEP,qBADA;AAENQ,YAAAA,KAAK,EAAE,aAAMC,QAAN,CAAeN;AAFhB,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUf,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACM,qBAAD,EAAwBX,YAAxB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUE,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,cAAD,CADE,EAEN;AACAK,UAAAA,IAAI,CAACH,iBAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, call, put } from \"redux-saga/effects\"\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n    return axios.post('/bucket', data);\n}\n\nfunction* addBucket(action) {\n    try {   \n        const result = yield call(addBucketAPI, action.data);\n        yield put({\n            type: ADD_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: ADD_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchAddBucket(){\n    yield takeLatest(ADD_BUCKET_REQUEST, addBucket);\n}\n\nfunction removebucketAPI(data) {\n    return axios.delete(`/bucket/${data.id}`);\n}\n\nfunction* removeBucket(action) {\n    try {\n        const result = yield call(removebucketAPI, action.data);\n        yield put({\n            type: REMOVE_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: REMOVE_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchRemoveBucket(){\n    yield takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n}\nexport default function* bucketSaga() {\n    yield all([\n        fork(watchAddBucket),\n        //fork(watchLoadBucket),\n        fork(watchRemoveBucket),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}