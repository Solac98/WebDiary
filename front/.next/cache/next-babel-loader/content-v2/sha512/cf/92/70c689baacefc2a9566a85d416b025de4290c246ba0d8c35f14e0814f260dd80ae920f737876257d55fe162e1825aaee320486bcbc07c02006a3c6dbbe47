{"ast":null,"code":"import { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n  return axios.post('/bucket', data);\n}\n\nfunction* addBucket(action) {\n  try {\n    const result = yield call(addBucketAPI, action.data);\n    yield put({\n      type: ADD_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchAddBucket() {\n  yield takeLatest(ADD_BUCKET_REQUEST, addBucket);\n}\n\nfunction removebucketAPI(data) {\n  return axios.delete(`/bucket/${data.id}`);\n}\n\nfunction* removeBucket(action) {\n  try {\n    const result = yield call(removebucketAPI, action.data);\n    yield put({\n      type: REMOVE_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchRemoveBucket() {\n  yield takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n}\n\nexport default function* bucketSaga() {\n  yield all([fork(watchAddBucket), //fork(watchLoadBucket),\n  fork(watchRemoveBucket)]);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/bucket.js"],"names":["all","fork","takeLatest","call","put","ADD_BUCKET_FAILURE","ADD_BUCKET_SUCCESS","ADD_BUCKET_REQUEST","REMOVE_BUCKET_REQUEST","REMOVE_BUCKET_SUCCESS","REMOVE_BUCKET_FAILURE","axios","addBucketAPI","data","post","addBucket","action","result","type","error","response","watchAddBucket","removebucketAPI","delete","id","removeBucket","watchRemoveBucket","bucketSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,EAAqEC,qBAArE,EAA4FC,qBAA5F,EAAmHC,qBAAnH,QAAgJ,oBAAhJ;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,SAAX,EAAsBD,IAAtB,CAAP;AACH;;AAED,UAAUE,SAAV,CAAoBC,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACS,YAAD,EAAeI,MAAM,CAACH,IAAtB,CAAzB;AACA,UAAMT,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEZ,kBADA;AAENO,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,KAAP,EAAc;AACZ,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEb,kBADA;AAENc,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFhB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,cAAV,GAA0B;AACtB,QAAMnB,UAAU,CAACK,kBAAD,EAAqBQ,SAArB,CAAhB;AACH;;AAED,SAASO,eAAT,CAAyBT,IAAzB,EAA+B;AAC3B,SAAOF,KAAK,CAACY,MAAN,CAAc,WAAUV,IAAI,CAACW,EAAG,EAAhC,CAAP;AACH;;AAED,UAAUC,YAAV,CAAuBT,MAAvB,EAA+B;AAC3B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACmB,eAAD,EAAkBN,MAAM,CAACH,IAAzB,CAAzB;AACA,UAAMT,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAET,qBADA;AAENI,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,KAAP,EAAc;AACZ,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAER,qBADA;AAENS,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFhB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUa,iBAAV,GAA6B;AACzB,QAAMxB,UAAU,CAACM,qBAAD,EAAwBiB,YAAxB,CAAhB;AACH;;AACD,eAAe,UAAUE,UAAV,GAAuB;AAClC,QAAM3B,GAAG,CAAC,CACNC,IAAI,CAACoB,cAAD,CADE,EAEN;AACApB,EAAAA,IAAI,CAACyB,iBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, call, put } from \"redux-saga/effects\"\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n    return axios.post('/bucket', data);\n}\n\nfunction* addBucket(action) {\n    try {   \n        const result = yield call(addBucketAPI, action.data);\n        yield put({\n            type: ADD_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: ADD_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchAddBucket(){\n    yield takeLatest(ADD_BUCKET_REQUEST, addBucket);\n}\n\nfunction removebucketAPI(data) {\n    return axios.delete(`/bucket/${data.id}`);\n}\n\nfunction* removeBucket(action) {\n    try {\n        const result = yield call(removebucketAPI, action.data);\n        yield put({\n            type: REMOVE_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: REMOVE_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchRemoveBucket(){\n    yield takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n}\nexport default function* bucketSaga() {\n    yield all([\n        fork(watchAddBucket),\n        //fork(watchLoadBucket),\n        fork(watchRemoveBucket),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}