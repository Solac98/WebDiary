{"ast":null,"code":"import { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE, LOAD_BUCKET_REQUEST, LOAD_BUCKET_SUCCESS, LOAD_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n  return axios.post('/bucket', data);\n}\n\nfunction* addBucket(action) {\n  try {\n    const result = yield call(addBucketAPI, action.data);\n    yield put({\n      type: ADD_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchAddBucket() {\n  yield takeLatest(ADD_BUCKET_REQUEST, addBucket);\n}\n\nfunction removebucketAPI(data) {\n  return axios.delete(`/bucket/${data}`);\n}\n\nfunction* removeBucket(action) {\n  try {\n    const result = yield call(removebucketAPI, action.data);\n    yield put({\n      type: REMOVE_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchRemoveBucket() {\n  yield takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n}\n\nfunction loadBucketAPI() {\n  return axios.get(\"/bucket\");\n}\n\nfunction* loadBucket() {\n  try {\n    const result = yield call(loadBucketAPI);\n    yield put({\n      type: LOAD_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadBucket() {\n  yield takeLatest(LOAD_BUCKET_REQUEST, loadBucket);\n}\n\nexport default function* bucketSaga() {\n  yield all([fork(watchAddBucket), fork(watchLoadBucket), fork(watchRemoveBucket)]);\n}","map":null,"metadata":{},"sourceType":"module"}