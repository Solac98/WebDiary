{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addBucket),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddBucket),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(bucketSaga);\n\nimport { all, takeLatest, call, put } from \"../../back/routes/user\";\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_REQUEST } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n  return axios.post('/bucket', data);\n}\n\nfunction addBucket(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addBucket$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addBucketAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_BUCKET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_BUCKET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddBucket() {\n  return _regeneratorRuntime.wrap(function watchAddBucket$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_BUCKET_REQUEST, addBucket);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function bucketSaga() {\n  return _regeneratorRuntime.wrap(function bucketSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddBucket) //fork(watchLoadBucket),\n          //fork(watchRemoveBucket),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/bucket.js"],"names":["addBucket","watchAddBucket","bucketSaga","all","takeLatest","call","put","ADD_BUCKET_FAILURE","ADD_BUCKET_REQUEST","axios","addBucketAPI","data","post","action","result","type","ADD_BUCKET_SUCCESS","error","response","fork"],"mappings":";;oDAQUA,S;qDAeAC,c;qDAIeC,U;;AA3BzB,SAASC,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,wBAA3C;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,SAAX,EAAsBD,IAAtB,CAAP;AACH;;AAED,SAAUX,SAAV,CAAoBa,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMR,IAAI,CAACK,YAAD,EAAeG,MAAM,CAACF,IAAtB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMR,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEC,kBADA;AAENL,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAML,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAER,kBADA;AAENU,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeP;AAFhB,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUV,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMG,UAAU,CAACI,kBAAD,EAAqBR,SAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNgB,IAAI,CAAClB,cAAD,CADE,CAEN;AACA;AAHM,WAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeLatest, call, put } from \"../../back/routes/user\";\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_REQUEST } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n    return axios.post('/bucket', data);\n}\n\nfunction* addBucket(action) {\n    try {\n        const result = yield call(addBucketAPI, action.data);\n        yield put({\n            type: ADD_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: ADD_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchAddBucket(){\n    yield takeLatest(ADD_BUCKET_REQUEST, addBucket);\n}\n\nexport default function* bucketSaga() {\n    yield all([\n        fork(watchAddBucket),\n        //fork(watchLoadBucket),\n        //fork(watchRemoveBucket),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}