{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useCallback, useEffect, useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport { Row, Col, DatePicker, Space, Card, Button, Image, Input, Modal, Form, Popconfirm, message } from 'antd';\nimport Router from 'next/router';\nimport { ADD_DIARY_REQUEST, LOAD_DIARY_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, DELETE_DIARY_REQUEST, DELETE_DIARY_RESET, UPDATE_REMOVE_IMAGE, UPDATE_DIARY_REQUEST, DIARY_ERROR_RESET } from '../reducers/diary';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport wrapper from '../store/configureStore';\n\nconst Diary = () => {\n  const dispatch = useDispatch();\n  const {\n    deleteDiaryError,\n    deleteDiaryDone,\n    post,\n    imagePaths,\n    removeImage,\n    addDriayLoading,\n    loadDiaryError,\n    loadDiaryLoading,\n    addDiaryError,\n    updateDiaryError,\n    uploadImagesError\n  } = useSelector(state => state.diary);\n  const {\n    isLoggedIn\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    if (deleteDiaryDone) {\n      alert(\"게시글 삭제 왼료\");\n      dispatch({\n        type: DELETE_DIARY_RESET\n      });\n    }\n  }, [deleteDiaryDone]);\n  useEffect(() => {\n    if (!isLoggedIn) {\n      Router.push('/');\n    }\n  }, [isLoggedIn]); //Error Effect\n\n  useEffect(() => {\n    if (loadDiaryError) {\n      alert(loadDiaryError);\n      dispatch({\n        type: DIARY_ERROR_RESET\n      });\n    }\n  }, [loadDiaryError]);\n  useEffect(() => {\n    if (addDiaryError) {\n      alert(addDiaryError);\n      dispatch({\n        type: DIARY_ERROR_RESET\n      });\n    }\n  }, [addDiaryError]);\n  useEffect(() => {\n    if (deleteDiaryError) {\n      alert(deleteDiaryError);\n      dispatch({\n        type: DIARY_ERROR_RESET\n      });\n    }\n  }, [deleteDiaryError]);\n\n  if (!isLoggedIn) {\n    return '내 정보 로딩중...';\n  } //Add Post State\n\n\n  const {\n    0: addTitle,\n    1: setAddTitle\n  } = useState(''); //Add Post Title\n\n  const {\n    0: addContent,\n    1: setAddContent\n  } = useState(''); //Add Post Contnet\n  //Open Add Post State\n\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false); //Update Post State\n\n  const {\n    0: upVisible,\n    1: setUpVisible\n  } = useState(false); //Date State\n\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState('날짜 선택!'); // Add Post Content Changes\n\n  const onChangeContent = useCallback(e => {\n    setAddContent(e.target.value);\n  }, [addContent]); // Close Add Post\n\n  const onCancel = useCallback(() => {\n    setVisible(false);\n    setUpVisible(false);\n    setAddTitle('');\n    setAddContent('');\n  }, [visible, addTitle]); // Add Post Tile Change\n\n  const onChangeTitle = useCallback(e => {\n    setAddTitle(e.target.value);\n  }, [addTitle]); // Submit Add Post\n\n  const onSubmitPost = useCallback(() => {\n    const formData = new FormData();\n    imagePaths.forEach(image => {\n      formData.append('image', image);\n    });\n    formData.append('content', addContent);\n    formData.append('title', addTitle);\n    formData.append('date', selectDate);\n    setVisible(false);\n    setAddTitle('');\n    setAddContent('');\n    return dispatch({\n      type: ADD_DIARY_REQUEST,\n      data: formData\n    });\n  }, [visible, addTitle, addContent, selectDate, imagePaths]); // Submit Update Post\n\n  const onUpdateSubmitPost = useCallback(() => {\n    const formData = new FormData();\n    imagePaths.forEach(image => {\n      formData.append('image', image);\n    });\n    formData.append('content', addContent);\n    formData.append('title', addTitle);\n    formData.append('date', selectDate);\n    formData.append('reImage', removeImage);\n    setUpVisible(false);\n    return dispatch({\n      type: UPDATE_DIARY_REQUEST,\n      data: formData\n    });\n  }, [upVisible, selectDate, imagePaths, removeImage, addTitle, addContent]); //Date Pick\n\n  const onChangeCal = useCallback((date, dateString) => {\n    setSelectDate(dateString);\n  }, [selectDate]); //Open Update Post\n\n  const onOpenUpdatePost = useCallback(() => {\n    const date = selectDate;\n\n    if (date === \"날짜 선택!\") {\n      return alert(\"날짜를 선택하세요!\");\n    }\n\n    setAddContent(post.content);\n    setAddTitle(post.title);\n    setUpVisible(true);\n  }, [selectDate, post, addContent, addTitle]); // Open Add Post\n\n  const onOpenAddPost = useCallback(() => {\n    const date = selectDate;\n\n    if (date === \"날짜 선택!\") {\n      return alert(\"날짜를 선택하세요!\");\n    }\n\n    setAddTitle('');\n    setAddContent('');\n    setVisible(true);\n  }, [visible, selectDate]); //Find Post\n\n  const onFindPost = useCallback(() => {\n    const date = selectDate;\n\n    if (date === \"날짜 선택!\") {\n      return alert(\"날짜를 선택하세요!\");\n    }\n\n    dispatch({\n      type: LOAD_DIARY_REQUEST,\n      data: {\n        date: date\n      }\n    });\n  }, [selectDate]);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }, []); //Update Image Delete\n\n  const onUpRemoveImage = useCallback(v => () => {\n    message.success({\n      content: '해당 이미지 삭제 요청을 하였습니다. 이미지 삭제 여부는 수정하기 진행하여 확인 바랍니다.',\n      className: 'custom-class',\n      style: {\n        marginTop: '20vh'\n      }\n    });\n    dispatch({\n      type: UPDATE_REMOVE_IMAGE,\n      data: v.id\n    });\n  }, [removeImage]);\n  const onDeletePost = useCallback(() => {\n    dispatch({\n      type: DELETE_DIARY_REQUEST,\n      data: selectDate\n    });\n  }, [selectDate]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(AppLayout, {\n      children: /*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsx(Col, {\n          xs: 24,\n          md: 6\n        }), /*#__PURE__*/_jsxs(Col, {\n          xs: 24,\n          md: 12,\n          children: [/*#__PURE__*/_jsx(Space, {\n            direction: \"horizontal\",\n            children: /*#__PURE__*/_jsx(DatePicker, {\n              style: {\n                marginTop: '10px',\n                marginBottom: '30px'\n              },\n              placeholder: selectDate,\n              onChange: onChangeCal\n            })\n          }), /*#__PURE__*/_jsx(Button, {\n            onClick: onFindPost,\n            loading: loadDiaryLoading,\n            children: \"\\uC870\\uD68C\"\n          }), /*#__PURE__*/_jsx(Button, {\n            onClick: onOpenAddPost,\n            children: \"\\uAE00\\uC4F0\\uAE30\"\n          }), /*#__PURE__*/_jsx(Button, {\n            onClick: onOpenUpdatePost,\n            children: \"\\uC218\\uC815\\uD558\\uAE30\"\n          }), /*#__PURE__*/_jsx(Popconfirm, {\n            title: `${selectDate}의 게시글을 삭제하시겠습니까?`,\n            onConfirm: onDeletePost,\n            children: /*#__PURE__*/_jsx(Button, {\n              children: \"\\uC0AD\\uC81C\"\n            })\n          }), /*#__PURE__*/_jsxs(Modal, {\n            visible: visible,\n            title: /*#__PURE__*/_jsx(Input, {\n              style: {\n                width: '70%'\n              },\n              value: addTitle,\n              placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n              onChange: onChangeTitle\n            }),\n            onOk: onSubmitPost,\n            onCancel: onCancel,\n            footer: [/*#__PURE__*/_jsx(Button, {\n              onClick: onCancel,\n              children: \"Return\"\n            }, \"back\")],\n            children: [/*#__PURE__*/_jsx(Input.TextArea, {\n              rows: 10,\n              placeholder: `  오늘의 기억남는 하루를 남겨보세요 :) \\n\\ 해당 날짜에 글이 작성되어 있으면 글이 올라가지 않아요 :)`,\n              onChange: onChangeContent,\n              value: addContent\n            }), /*#__PURE__*/_jsxs(Form, {\n              encType: \"multipart/form-data\",\n              onFinish: onSubmitPost,\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  type: \"file\",\n                  name: \"image\",\n                  multiple: true,\n                  hidden: true,\n                  ref: imageInput,\n                  onChange: onChangeImages\n                }), /*#__PURE__*/_jsx(Button, {\n                  onClick: onClickImageUpload,\n                  children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n                }), /*#__PURE__*/_jsx(Button, {\n                  style: {\n                    float: 'right'\n                  },\n                  htmlType: \"submit\",\n                  type: \"primary\",\n                  loading: addDriayLoading,\n                  children: \"\\uC62C\\uB9AC\\uAE30\"\n                }, \"submit\")]\n              }), /*#__PURE__*/_jsx(\"div\", {\n                children: imagePaths && imagePaths.map((v, i) => /*#__PURE__*/_jsxs(\"div\", {\n                  style: {\n                    display: 'inline-block'\n                  },\n                  children: [/*#__PURE__*/_jsx(\"img\", {\n                    src: `http://localhost:3065/${v}`,\n                    style: {\n                      width: '100px'\n                    },\n                    alt: v\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    children: /*#__PURE__*/_jsx(Button, {\n                      onClick: onRemoveImage(i),\n                      children: \"\\uC81C\\uAC70\"\n                    })\n                  })]\n                }, v))\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(Modal, {\n            visible: upVisible,\n            title: /*#__PURE__*/_jsx(Input, {\n              style: {\n                width: '70%'\n              },\n              value: addTitle,\n              onChange: onChangeTitle\n            }),\n            onOk: onUpdateSubmitPost,\n            onCancel: onCancel,\n            footer: [/*#__PURE__*/_jsx(Button, {\n              onClick: onCancel,\n              children: \"Return\"\n            }, \"back\")],\n            children: [/*#__PURE__*/_jsx(Input.TextArea, {\n              rows: 10,\n              onChange: onChangeContent,\n              value: addContent\n            }), /*#__PURE__*/_jsxs(Form, {\n              encType: \"multipart/form-data\",\n              onFinish: onUpdateSubmitPost,\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  type: \"file\",\n                  name: \"image\",\n                  multiple: true,\n                  hidden: true,\n                  ref: imageInput,\n                  onChange: onChangeImages\n                }), /*#__PURE__*/_jsx(Button, {\n                  onClick: onClickImageUpload,\n                  children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n                }), /*#__PURE__*/_jsx(Button, {\n                  style: {\n                    float: 'right'\n                  },\n                  htmlType: \"submit\",\n                  type: \"primary\",\n                  children: \"\\uC218\\uC815\\uD558\\uAE30\"\n                }, \"submit\")]\n              }), /*#__PURE__*/_jsx(\"div\", {\n                children: imagePaths && imagePaths.map((v, i) => /*#__PURE__*/_jsxs(\"div\", {\n                  style: {\n                    display: 'inline-block'\n                  },\n                  children: [/*#__PURE__*/_jsx(\"img\", {\n                    src: `http://localhost:3065/${v}`,\n                    style: {\n                      width: '100px'\n                    },\n                    alt: v.src\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    children: /*#__PURE__*/_jsx(Button, {\n                      onClick: onRemoveImage(v),\n                      children: \"\\uC81C\\uAC70(New)\"\n                    })\n                  })]\n                }, v))\n              }), /*#__PURE__*/_jsx(\"div\", {\n                children: post.Images && post.Images.map((v, i) => /*#__PURE__*/_jsxs(\"div\", {\n                  style: {\n                    display: 'inline-block'\n                  },\n                  children: [/*#__PURE__*/_jsx(\"img\", {\n                    src: `http://localhost:3065/${v.src}`,\n                    style: {\n                      width: '100px'\n                    },\n                    alt: v.src\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    children: /*#__PURE__*/_jsx(Button, {\n                      onClick: onUpRemoveImage(v),\n                      children: \"\\uC81C\\uAC70(\\uAE30\\uC874)\"\n                    })\n                  })]\n                }, v))\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(Card, {\n            style: {\n              margin: '20px',\n              overflow: 'scroll',\n              height: '550px'\n            },\n            title: post.title,\n            bordered: false,\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              children: post.content\n            }), /*#__PURE__*/_jsx(Image.PreviewGroup, {\n              children: post.Images.map((v, i) => /*#__PURE__*/_jsx(Image, {\n                witdh: \"100%\",\n                src: `http://localhost:3065/${v.src}`\n              }, i))\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(Col, {\n          xs: 24,\n          md: 6\n        })]\n      })\n    })\n  });\n}; //SSR 적용 - getServerSidProps 사용\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //Brower 에서 요청이 아닌 Front -> Back이므로 쿠키를 전달해줘야 한다.\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie; //요청 헤더에 쿠키 넣기.\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Diary;","map":null,"metadata":{},"sourceType":"module"}