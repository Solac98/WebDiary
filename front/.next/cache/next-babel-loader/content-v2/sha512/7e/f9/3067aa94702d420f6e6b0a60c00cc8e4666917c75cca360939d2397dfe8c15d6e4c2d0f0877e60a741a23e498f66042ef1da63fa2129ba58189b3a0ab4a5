{"ast":null,"code":"import { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE, LOAD_BUCKET_REQUEST, LOAD_BUCKET_SUCCESS, LOAD_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n  return axios.post('/bucket', data);\n}\n\nfunction* addBucket(action) {\n  try {\n    const result = yield call(addBucketAPI, action.data);\n    yield put({\n      type: ADD_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchAddBucket() {\n  yield takeLatest(ADD_BUCKET_REQUEST, addBucket);\n}\n\nfunction removebucketAPI(data) {\n  return axios.delete(`/bucket/${data}`);\n}\n\nfunction* removeBucket(action) {\n  try {\n    const result = yield call(removebucketAPI, action.data);\n    yield put({\n      type: REMOVE_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchRemoveBucket() {\n  yield takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n}\n\nfunction loadBucketAPI() {\n  return axios.get(\"/bucket\");\n}\n\nfunction* loadBucket() {\n  try {\n    const result = yield call(loadBucketAPI);\n    yield put({\n      type: LOAD_BUCKET_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_BUCKET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadBucket() {\n  yield takeLatest(LOAD_BUCKET_REQUEST, loadBucket);\n}\n\nexport default function* bucketSaga() {\n  yield all([fork(watchAddBucket), fork(watchLoadBucket), fork(watchRemoveBucket)]);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/bucket.js"],"names":["all","fork","takeLatest","call","put","ADD_BUCKET_FAILURE","ADD_BUCKET_SUCCESS","ADD_BUCKET_REQUEST","REMOVE_BUCKET_REQUEST","REMOVE_BUCKET_SUCCESS","REMOVE_BUCKET_FAILURE","LOAD_BUCKET_REQUEST","LOAD_BUCKET_SUCCESS","LOAD_BUCKET_FAILURE","axios","addBucketAPI","data","post","addBucket","action","result","type","error","response","watchAddBucket","removebucketAPI","delete","removeBucket","watchRemoveBucket","loadBucketAPI","get","loadBucket","watchLoadBucket","bucketSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,EAAqEC,qBAArE,EAA4FC,qBAA5F,EAAmHC,qBAAnH,EAA0IC,mBAA1I,EAA+JC,mBAA/J,EAAoLC,mBAApL,QAA+M,oBAA/M;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,SAAX,EAAsBD,IAAtB,CAAP;AACH;;AAED,UAAUE,SAAV,CAAoBC,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACY,YAAD,EAAeI,MAAM,CAACH,IAAtB,CAAzB;AACA,UAAMZ,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEf,kBADA;AAENU,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,KAAP,EAAc;AACZ,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEhB,kBADA;AAENiB,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFhB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,cAAV,GAA0B;AACtB,QAAMtB,UAAU,CAACK,kBAAD,EAAqBW,SAArB,CAAhB;AACH;;AAED,SAASO,eAAT,CAAyBT,IAAzB,EAA+B;AAC3B,SAAOF,KAAK,CAACY,MAAN,CAAc,WAAUV,IAAK,EAA7B,CAAP;AACH;;AAED,UAAUW,YAAV,CAAuBR,MAAvB,EAA+B;AAC3B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACsB,eAAD,EAAkBN,MAAM,CAACH,IAAzB,CAAzB;AACA,UAAMZ,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEZ,qBADA;AAENO,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,KAAP,EAAc;AACZ,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEX,qBADA;AAENY,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFhB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUY,iBAAV,GAA6B;AACzB,QAAM1B,UAAU,CAACM,qBAAD,EAAwBmB,YAAxB,CAAhB;AACH;;AAED,SAASE,aAAT,GAAwB;AACpB,SAAOf,KAAK,CAACgB,GAAN,CAAU,SAAV,CAAP;AACH;;AAED,UAAUC,UAAV,GAAuB;AACnB,MAAI;AACA,UAAMX,MAAM,GAAG,MAAMjB,IAAI,CAAC0B,aAAD,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAET,mBADA;AAENI,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,KAAP,EAAc;AACZ,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAER,mBADA;AAENS,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFhB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUgB,eAAV,GAA4B;AACxB,QAAM9B,UAAU,CAACS,mBAAD,EAAsBoB,UAAtB,CAAhB;AACH;;AACD,eAAe,UAAUE,UAAV,GAAuB;AAClC,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAACuB,cAAD,CADE,EAENvB,IAAI,CAAC+B,eAAD,CAFE,EAGN/B,IAAI,CAAC2B,iBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, call, put } from \"redux-saga/effects\"\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE, LOAD_BUCKET_REQUEST, LOAD_BUCKET_SUCCESS, LOAD_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n    return axios.post('/bucket', data);\n}\n\nfunction* addBucket(action) {\n    try {   \n        const result = yield call(addBucketAPI, action.data);\n        yield put({\n            type: ADD_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: ADD_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchAddBucket(){\n    yield takeLatest(ADD_BUCKET_REQUEST, addBucket);\n}\n\nfunction removebucketAPI(data) {\n    return axios.delete(`/bucket/${data}`);\n}\n\nfunction* removeBucket(action) {\n    try {\n        const result = yield call(removebucketAPI, action.data);\n        yield put({\n            type: REMOVE_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: REMOVE_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchRemoveBucket(){\n    yield takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n}\n\nfunction loadBucketAPI(){\n    return axios.get(\"/bucket\");\n}\n\nfunction* loadBucket() {\n    try {\n        const result = yield call(loadBucketAPI);\n        yield put({\n            type: LOAD_BUCKET_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        yield put({\n            type: LOAD_BUCKET_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchLoadBucket() {\n    yield takeLatest(LOAD_BUCKET_REQUEST, loadBucket);\n}\nexport default function* bucketSaga() {\n    yield all([\n        fork(watchAddBucket),\n        fork(watchLoadBucket),\n        fork(watchRemoveBucket),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}