{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addCalendar),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddCalendar),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadCalendar),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadCalendar),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removeCalendar),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveCalendar),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(calendarSaga);\n\nimport axios from 'axios';\nimport { all, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport { ADD_CALENDAR_FAILURE, ADD_CALENDAR_REQUEST, ADD_CALENDAR_SUCCESS, LOAD_CALENDAR_REQUEST, LOAD_CALENDAR_SUCCESS, REMOVE_CALENDAR_FAILURE, REMOVE_CALENDAR_REQUEST, REMOVE_CALENDAR_SUCCESS } from '../reducers/calendar';\n\nfunction addCalendarAPI(data) {\n  return axios.post('/calendar', data);\n}\n\nfunction addCalendar(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addCalendar$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addCalendarAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_CALENDAR_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_CALENDAR_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddCalendar() {\n  return _regeneratorRuntime.wrap(function watchAddCalendar$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_CALENDAR_REQUEST, addCalendar);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadCalendarAPI(data) {\n  return axios.get('/calendar');\n}\n\nfunction loadCalendar(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadCalendar$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadCalendarAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_CALENDAR_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: ADD_CALENDAR_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadCalendar() {\n  return _regeneratorRuntime.wrap(function watchLoadCalendar$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_CALENDAR_REQUEST, loadCalendar);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction removeCalendarAPI(data) {\n  return axios[\"delete\"](\"/calendar/\".concat(data.id));\n}\n\nfunction removeCalendar(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removeCalendar$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(removeCalendarAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: REMOVE_CALENDAR_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: REMOVE_CALENDAR_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchRemoveCalendar() {\n  return _regeneratorRuntime.wrap(function watchRemoveCalendar$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_CALENDAR_REQUEST, removeCalendar);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function calendarSaga() {\n  return _regeneratorRuntime.wrap(function calendarSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddCalendar), fork(watchLoadCalendar), fork(watchRemoveCalendar)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":null,"metadata":{},"sourceType":"module"}