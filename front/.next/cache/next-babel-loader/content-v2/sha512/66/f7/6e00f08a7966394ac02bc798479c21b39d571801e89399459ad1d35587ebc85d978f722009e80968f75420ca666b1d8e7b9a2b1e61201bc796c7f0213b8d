{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\nimport { LOAD_BUCKET_REQUEST } from '../reducers/bucket';\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: LOAD_BUCKET_REQUEST\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user/signup', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.response.data\n    });\n  }\n} // LogIn\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} // LogOut\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n} //Sign Up\n\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* usersSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOAD_BUCKET_REQUEST","logInAPI","data","post","logIn","action","result","type","err","console","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","usersSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, call} from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\nimport { LOAD_BUCKET_REQUEST } from '../reducers/bucket';\n\n\nfunction logInAPI(data) {\n    return axios.post('/user/login', data);\n}\n\nfunction* logIn(action){\n    try{\n        const result = yield call(logInAPI, action.data);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: LOAD_BUCKET_REQUEST,\n        });\n    } catch(err) {\n        console.error(err);\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\nfunction logOutAPI(){\n    return axios.post('/user/logout');\n}\n\nfunction* logOut(){\n    try {\n        yield call(logOutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction signUpAPI(data) {\n    return axios.post('/user/signup', data);\n}\n\nfunction* signUp(action){\n    try {\n        const result = yield call(signUpAPI, action.data);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (error) {\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\n// LogIn\nfunction* watchLogIn() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n// LogOut\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n//Sign Up\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\n\nexport default function* usersSaga() {\n    yield all ([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}