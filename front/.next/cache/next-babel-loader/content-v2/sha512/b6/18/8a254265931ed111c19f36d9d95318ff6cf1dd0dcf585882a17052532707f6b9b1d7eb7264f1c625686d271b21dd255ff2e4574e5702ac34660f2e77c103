{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addBucket),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddBucket),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removeBucket),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveBucket),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadBucket),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadBucket),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(bucketSaga);\n\nimport { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport { ADD_BUCKET_FAILURE, ADD_BUCKET_SUCCESS, ADD_BUCKET_REQUEST, REMOVE_BUCKET_REQUEST, REMOVE_BUCKET_SUCCESS, REMOVE_BUCKET_FAILURE, LOAD_BUCKET_REQUEST, LOAD_BUCKET_SUCCESS, LOAD_BUCKET_FAILURE } from \"../reducers/bucket\";\nimport axios from 'axios';\n\nfunction addBucketAPI(data) {\n  return axios.post('/bucket', data);\n}\n\nfunction addBucket(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addBucket$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addBucketAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_BUCKET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_BUCKET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddBucket() {\n  return _regeneratorRuntime.wrap(function watchAddBucket$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_BUCKET_REQUEST, addBucket);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction removebucketAPI(data) {\n  return axios[\"delete\"](\"/bucket/\".concat(data));\n}\n\nfunction removeBucket(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removeBucket$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removebucketAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: REMOVE_BUCKET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: REMOVE_BUCKET_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchRemoveBucket() {\n  return _regeneratorRuntime.wrap(function watchRemoveBucket$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(REMOVE_BUCKET_REQUEST, removeBucket);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadBucketAPI() {\n  return axios.get(\"/bucket\");\n}\n\nfunction loadBucket() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadBucket$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadBucketAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_BUCKET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_BUCKET_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadBucket() {\n  return _regeneratorRuntime.wrap(function watchLoadBucket$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_BUCKET_REQUEST, loadBucket);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function bucketSaga() {\n  return _regeneratorRuntime.wrap(function bucketSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddBucket), fork(watchLoadBucket), fork(watchRemoveBucket)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":null,"metadata":{},"sourceType":"module"}