{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST } from '../reducers/user';\n\nfunction logInAPI(data) {// return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {} catch (error) {\n    console.error(error);\n    y;\n  }\n} // LogIn\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} // LogOut\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* usersSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","logInAPI","data","logIn","action","type","err","console","error","reponse","logOut","y","watchLogIn","watchLogOut","usersSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,QAAgF,kBAAhF;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACrB;AACF;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEP,cADA;AAENI,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMI,GAAN,EAAW;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMb,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEN,cADA;AAENS,MAAAA,KAAK,EAAEF,GAAG,CAACG,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,MAAV,GAAkB;AACd,MAAI,CAEH,CAFD,CAEE,OAAOF,KAAP,EAAc;AACZD,IAAAA,OAAO,CAACC,KAAR,CAAcA,KAAd;AACAG,IAAAA,CAAC;AACJ;AACJ,C,CAED;;;AACA,UAAUC,UAAV,GAAuB;AACnB,QAAMlB,UAAU,CAACG,cAAD,EAAiBM,KAAjB,CAAhB;AACH,C,CACD;;;AACA,UAAUU,WAAV,GAAwB;AACpB,QAAMnB,UAAU,CAACM,eAAD,EAAkBU,MAAlB,CAAhB;AACH;;AAGD,eAAe,UAAUI,SAAV,GAAsB;AACjC,QAAMxB,GAAG,CAAE,CACPE,IAAI,CAACoB,UAAD,CADG,EAEPpB,IAAI,CAACqB,WAAD,CAFG,CAAF,CAAT;AAIH","sourcesContent":["import { all, delay, fork, put, takeLatest, call} from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST } from '../reducers/user';\n\n\nfunction logInAPI(data) {\n   // return axios.post('/user/login', data);\n}\n\nfunction* logIn(action){\n    try{\n        //const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch(err) {\n        console.error(err);\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.reponse.data,\n        });\n    }\n}\n\nfunction* logOut(){\n    try {\n        \n    } catch (error) {\n        console.error(error);\n        y\n    }\n}\n\n// LogIn\nfunction* watchLogIn() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n// LogOut\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\n\nexport default function* usersSaga() {\n    yield all ([\n        fork(watchLogIn),\n        fork(watchLogOut),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}