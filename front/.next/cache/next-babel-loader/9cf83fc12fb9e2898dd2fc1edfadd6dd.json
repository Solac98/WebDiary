{"ast":null,"code":"import produce from '../util/produce'; //bucket 더미 데이터\n\nexport const initialState = {\n  post: {},\n  imagePaths: [],\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addDiaryLoading: false,\n  addDiaryDone: false,\n  addDiaryError: null,\n  loadDiaryLoading: false,\n  loadDiaryDone: false,\n  loadDiaryError: null\n};\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST'; // 액션의 이름\n\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS'; // 액션의 이름\n\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; // 액션의 이름\n\nexport const LOAD_DIARY_REQUEST = 'LOAD_DIARY_REQUEST'; // 액션의 이름\n\nexport const LOAD_DIARY_SUCCESS = 'LOAD_DIARY_SUCCESS'; // 액션의 이름\n\nexport const LOAD_DIARY_FAILURE = 'LOAD_DIARY_FAILURE'; // 액션의 이름\n\nexport const ADD_DIARY_REQUEST = 'ADD_DIARY_REQUEST'; // 액션의 이름\n\nexport const ADD_DIARY_SUCCESS = 'ADD_DIARY_SUCCESS'; // 액션의 이름\n\nexport const ADD_DIARY_FAILURE = 'ADD_DIARY_FAILURE'; // 액션의 이름\n\nexport const REMOVE_DIARY_REQUEST = 'REMOVE_DIARY_REQUEST'; // 액션의 이름\n\nexport const REMOVE_DIARY_SUCCESS = 'REMOVE_DIARY_SUCCESS'; // 액션의 이름\n\nexport const REMOVE_DIARY_FAILURE = 'REMOVE_DIARY_FAILURE'; // 액션의 이름\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'; // 액션의 이름\n\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'; // 액션의 이름\n\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 액션의 이름\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; //현재는 REQUEST에서 SUCCESS역활까지 하고있음, saga작성 시 구분하기!\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      {\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      }\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      {\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      }\n\n    case LOAD_DIARY_REQUEST:\n      {\n        draft.loadDiaryLoading = true;\n        draft.loadDiaryDone = false;\n        draft.loadDiaryError = null;\n        break;\n      }\n\n    case LOAD_DIARY_SUCCESS:\n      {\n        draft.loadDiaryLoading = false;\n        draft.loadDiaryDone = true;\n        draft.post = action.data;\n        break;\n      }\n\n    case LOAD_DIARY_FAILURE:\n      {\n        draft.loadDiaryLoading = false;\n        draft.loadDiaryError = action.error;\n        break;\n      }\n\n    case ADD_DIARY_REQUEST:\n      {\n        draft.addDiaryLoading = true;\n        draft.addDiaryDone = false;\n        draft.addDiaryError = null;\n        break;\n      }\n\n    case ADD_DIARY_SUCCESS:\n      {\n        draft.addDiaryLoading = false;\n        draft.addDiaryDone = true;\n        draft.post = action.data;\n        break;\n      }\n\n    case ADD_DIARY_FAILURE:\n      {\n        draft.addDiaryLoading = false;\n        draft.addDiaryError = action.error;\n        break;\n      }\n\n    case REMOVE_DIARY_REQUEST:\n      {\n        //현재는 더미데이터에서 삭제하지만 디비 작업시 디비에서 삭제\n        draft.dummyData = dummyData.post.filter(v => v.id !== action.data.id);\n        break;\n      }\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/reducers/diary.js"],"names":["produce","initialState","post","imagePaths","uploadImagesLoading","uploadImagesDone","uploadImagesError","addDiaryLoading","addDiaryDone","addDiaryError","loadDiaryLoading","loadDiaryDone","loadDiaryError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LOAD_DIARY_REQUEST","LOAD_DIARY_SUCCESS","LOAD_DIARY_FAILURE","ADD_DIARY_REQUEST","ADD_DIARY_SUCCESS","ADD_DIARY_FAILURE","REMOVE_DIARY_REQUEST","REMOVE_DIARY_SUCCESS","REMOVE_DIARY_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","REMOVE_IMAGE","reducer","state","action","draft","type","filter","v","i","data","error","dummyData","id"],"mappings":"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","sourcesContent":["import produce from '../util/produce';\n\n//bucket 더미 데이터\n\nexport const initialState = {\n    post: {},\n    imagePaths: [],\n    uploadImagesLoading: false,\n    uploadImagesDone: false,\n    uploadImagesError: null,\n\n    addDiaryLoading: false,\n    addDiaryDone: false,\n    addDiaryError: null,\n\n    loadDiaryLoading: false,\n    loadDiaryDone: false,\n    loadDiaryError: null,\n};\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST'; // 액션의 이름\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS'; // 액션의 이름\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; // 액션의 이름\n\nexport const LOAD_DIARY_REQUEST = 'LOAD_DIARY_REQUEST'; // 액션의 이름\nexport const LOAD_DIARY_SUCCESS = 'LOAD_DIARY_SUCCESS'; // 액션의 이름\nexport const LOAD_DIARY_FAILURE = 'LOAD_DIARY_FAILURE'; // 액션의 이름\n\nexport const ADD_DIARY_REQUEST = 'ADD_DIARY_REQUEST'; // 액션의 이름\nexport const ADD_DIARY_SUCCESS = 'ADD_DIARY_SUCCESS'; // 액션의 이름\nexport const ADD_DIARY_FAILURE = 'ADD_DIARY_FAILURE'; // 액션의 이름\n\nexport const REMOVE_DIARY_REQUEST = 'REMOVE_DIARY_REQUEST'; // 액션의 이름\nexport const REMOVE_DIARY_SUCCESS = 'REMOVE_DIARY_SUCCESS'; // 액션의 이름\nexport const REMOVE_DIARY_FAILURE = 'REMOVE_DIARY_FAILURE'; // 액션의 이름\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'; // 액션의 이름\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'; // 액션의 이름\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 액션의 이름\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\n\n//현재는 REQUEST에서 SUCCESS역활까지 하고있음, saga작성 시 구분하기!\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n    switch(action.type){\n        case REMOVE_IMAGE:\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n            break;\n        case UPLOAD_IMAGES_REQUEST: {\n            draft.uploadImagesLoading = true;\n            draft.uploadImagesDone = false;\n            draft.uploadImagesError = null;\n            break;\n        }\n        case UPLOAD_IMAGES_SUCCESS: {\n            draft.imagePaths = action.data;\n            draft.uploadImagesLoading = false;\n            draft.uploadImagesDone = true;\n        break;\n        }\n        case UPLOAD_IMAGES_FAILURE: {\n            draft.uploadImagesLoading = false;\n            draft.uploadImagesError = action.error;\n            break;\n        }\n        case LOAD_DIARY_REQUEST:{\n            draft.loadDiaryLoading = true;\n            draft.loadDiaryDone = false;\n            draft.loadDiaryError = null;\n            break;\n        }\n        case LOAD_DIARY_SUCCESS:{\n            draft.loadDiaryLoading = false;\n            draft.loadDiaryDone = true;\n            draft.post = action.data;\n            break;\n        }\n        case LOAD_DIARY_FAILURE:{\n            draft.loadDiaryLoading = false;\n            draft.loadDiaryError = action.error;\n            break;\n        }\n        case ADD_DIARY_REQUEST:{\n            draft.addDiaryLoading = true;\n            draft.addDiaryDone = false;\n            draft.addDiaryError = null;            \n            break;\n        }\n        case ADD_DIARY_SUCCESS:{\n            draft.addDiaryLoading = false;\n            draft.addDiaryDone = true;\n            draft.post = action.data;\n            break;\n        }\n        case ADD_DIARY_FAILURE:{\n            draft.addDiaryLoading = false;\n            draft.addDiaryError = action.error;\n            break;\n        }\n        case REMOVE_DIARY_REQUEST:{\n            //현재는 더미데이터에서 삭제하지만 디비 작업시 디비에서 삭제\n            draft.dummyData = dummyData.post.filter((v) => v.id !== action.data.id);\n            break;\n        }\n    }\n})\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}