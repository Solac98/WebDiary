{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(data) {// return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction logOutAPI() {//return axios.post('/user/logout');\n}\n\nfunction* logOut(action) {\n  try {\n    //const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user/signup', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    console.log(\"ddddd\");\n    console.error(error.reponse);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.reponse\n    });\n  }\n} // LogIn\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} // LogOut\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n} //Sign Up\n\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* usersSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","logInAPI","data","logIn","action","type","err","console","error","reponse","logOutAPI","logOut","signUpAPI","post","signUp","result","log","watchLogIn","watchLogOut","watchSignUp","usersSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,EAA4GC,eAA5G,EAA6HC,eAA7H,EAA8IC,eAA9I,QAAqK,kBAArK;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACrB;AACF;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEZ,cADA;AAENS,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMI,GAAN,EAAW;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEX,cADA;AAENc,MAAAA,KAAK,EAAEF,GAAG,CAACG,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASQ,SAAT,GAAoB,CAChB;AACH;;AAED,UAAUC,MAAV,CAAiBP,MAAjB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOS,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAET,eADA;AAENY,MAAAA,KAAK,EAAEF,GAAG,CAACG,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,SAAT,CAAmBV,IAAnB,EAAyB;AACrB,SAAOX,KAAK,CAACsB,IAAN,CAAW,cAAX,EAA2BX,IAA3B,CAAP;AACH;;AAED,UAAUY,MAAV,CAAiBV,MAAjB,EAAwB;AACpB,MAAI;AACA,UAAMW,MAAM,GAAG,MAAMzB,IAAI,CAACsB,SAAD,EAAYR,MAAM,CAACF,IAAnB,CAAzB;AACA,UAAMd,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOQ,KAAP,EAAc;AACZD,IAAAA,OAAO,CAACS,GAAR,CAAY,OAAZ;AACAT,IAAAA,OAAO,CAACC,KAAR,CAAcA,KAAK,CAACC,OAApB;AACA,UAAMrB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEN,eADA;AAENS,MAAAA,KAAK,EAAEA,KAAK,CAACC;AAFP,KAAD,CAAT;AAIH;AACJ,C,CAED;;;AACA,UAAUQ,UAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACG,cAAD,EAAiBW,KAAjB,CAAhB;AACH,C,CACD;;;AACA,UAAUe,WAAV,GAAwB;AACpB,QAAM7B,UAAU,CAACM,eAAD,EAAkBgB,MAAlB,CAAhB;AACH,C,CACD;;;AACA,UAAUQ,WAAV,GAAwB;AACpB,QAAM9B,UAAU,CAACS,eAAD,EAAkBgB,MAAlB,CAAhB;AACH;;AAGD,eAAe,UAAUM,SAAV,GAAsB;AACjC,QAAMnC,GAAG,CAAE,CACPE,IAAI,CAAC8B,UAAD,CADG,EAEP9B,IAAI,CAAC+B,WAAD,CAFG,EAGP/B,IAAI,CAACgC,WAAD,CAHG,CAAF,CAAT;AAKH","sourcesContent":["import { all, delay, fork, put, takeLatest, call} from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\n\n\nfunction logInAPI(data) {\n   // return axios.post('/user/login', data);\n}\n\nfunction* logIn(action){\n    try{\n        //const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch(err) {\n        console.error(err);\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.reponse.data,\n        });\n    }\n}\nfunction logOutAPI(){\n    //return axios.post('/user/logout');\n}\n\nfunction* logOut(action){\n    try {\n        //const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.reponse.data,\n        });\n    }\n}\n\nfunction signUpAPI(data) {\n    return axios.post('/user/signup', data);\n}\n\nfunction* signUp(action){\n    try {\n        const result = yield call(signUpAPI, action.data);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (error) {\n        console.log(\"ddddd\");\n        console.error(error.reponse);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: error.reponse,\n        });\n    }\n}\n\n// LogIn\nfunction* watchLogIn() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n// LogOut\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n//Sign Up\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\n\nexport default function* usersSaga() {\n    yield all ([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}