{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sol/google/Project/SolarSeed/front/pages/allcalendar.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Calendar, Badge, DatePicker, Space, Input, Button } from 'antd';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { ADD_CALENDAR_REQUEST, LOAD_CALENDAR_REQUEST, REMOVE_CALENDAR_REQUEST } from '../reducers/calendar';\n\nconst AllCalendar = () => {\n  const dispatch = useDispatch();\n  const {\n    isLoggedIn\n  } = useSelector(state => state.user);\n  const {\n    calendar\n  } = useSelector(state => state.calendar);\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return Router.push('/login');\n    }\n\n    dispatch({\n      type: LOAD_CALENDAR_REQUEST\n    });\n  }, [isLoggedIn]);\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState('2021-01-01');\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, [text]); //더미 데이터 \n\n  function getListData(value) {\n    let listData = calendar.filter(v => v.date === value);\n    return listData || [];\n  }\n\n  const onSelect = useCallback(e => {\n    console.log(e.format('YYYY-MM-DD'));\n    setSelectDate(e.format('YYYY-MM-DD'));\n  }, [selectDate]); //temp\n\n  const onPanelChange = () => {\n    console.log('달 페이지 바뀌었음!');\n  }; //temp\n\n\n  const dateCellRender = useCallback(value => {\n    const listData = getListData(value.format('YYYY-MM-DD'));\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        paddingInlineStart: '0'\n      },\n      className: \"events\",\n      children: listData.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          listStyle: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Badge, {\n          status: item.type,\n          text: item.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, item.content, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }, [calendar]);\n\n  const onChangeCal = (date, dateString) => {\n    setSelectDate(dateString);\n  }; //달력에 추가\n\n\n  const onSubmit = useCallback(() => {\n    const plus = {\n      id: 7,\n      date: selectDate,\n      type: 'success',\n      content: text\n    }; //임시로 id인덱스 부여, 디비 작업시 id 자동\n\n    console.log(plus);\n    dispatch({\n      type: ADD_CALENDAR_REQUEST,\n      data: plus\n    });\n    console.log(calendar);\n  }, [selectDate, text, calendar]); //달력에 추가한거 삭제\n\n  const onDelete = useCallback(() => {\n    const deleteData = calendar.filter(e => e.date === selectDate);\n    console.log(deleteData);\n    /*dispatch({\n      type: REMOVE_CALENDAR_REQUEST,\n      data: {\n        date: selectDate,\n        content: deleteData,\n      },\n    });*/\n  }, [selectDate, calendar,,\n  /*tempData*/\n  text]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n        charSet: \"utf-8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(AppLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Space, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(DatePicker, {\n          style: {\n            marginTop: '10px'\n          },\n          placeholder: selectDate,\n          onChange: onChangeCal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"\\uB2EC\\uB825\\uC5D0 \\uAE30\\uB85D\\uD558\\uC138\\uC694!\",\n        style: {\n          width: '300px',\n          marginTop: '10px'\n        },\n        name: \"text\",\n        value: text,\n        type: \"text\",\n        onChange: onChangeText,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: '10px'\n        },\n        onClick: onSubmit,\n        children: \"\\uC785\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: '10px'\n        },\n        onClick: onDelete,\n        children: \"\\uC0AD\\uC81C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n        dateCellRender: dateCellRender,\n        onPanelChange: onPanelChange,\n        onSelect: onSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true);\n};\n\nexport default AllCalendar;","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/pages/allcalendar.js"],"names":["React","useState","useCallback","useEffect","AppLayout","useDispatch","useSelector","Calendar","Badge","DatePicker","Space","Input","Button","Head","Router","ADD_CALENDAR_REQUEST","LOAD_CALENDAR_REQUEST","REMOVE_CALENDAR_REQUEST","AllCalendar","dispatch","isLoggedIn","state","user","calendar","push","type","text","setText","selectDate","setSelectDate","onChangeText","e","target","value","getListData","listData","filter","v","date","onSelect","console","log","format","onPanelChange","dateCellRender","paddingInlineStart","map","item","listStyle","content","onChangeCal","dateString","onSubmit","plus","id","data","onDelete","deleteData","marginTop","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect} from 'react';\nimport AppLayout from '../components/AppLayout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Calendar, Badge, DatePicker, Space, Input, Button } from 'antd';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { ADD_CALENDAR_REQUEST, LOAD_CALENDAR_REQUEST, REMOVE_CALENDAR_REQUEST } from '../reducers/calendar';\nconst AllCalendar = () => {\n    const dispatch = useDispatch();\n    const{ isLoggedIn} = useSelector((state) => state.user);\n    const { calendar } = useSelector((state) => state.calendar);\n    \n    useEffect(() => {\n        if(!isLoggedIn){\n            return Router.push('/login');\n        }\n        dispatch({\n          type: LOAD_CALENDAR_REQUEST,\n        });\n    }, [isLoggedIn]);\n\n    const [text, setText] = useState('');\n    const [selectDate, setSelectDate] = useState('2021-01-01');\n\n    const onChangeText = useCallback((e) => {\n      setText(e.target.value);\n    }, [text]);\n\n    //더미 데이터 \n    function getListData(value) { \n        let listData = calendar.filter((v) => v.date === value);\n        return listData || [];\n      }\n\n    const onSelect = useCallback((e) => {\n      console.log(e.format('YYYY-MM-DD'));\n      setSelectDate(e.format('YYYY-MM-DD'));\n    }, [selectDate]);\n\n    //temp\n    const onPanelChange = () => {\n      console.log('달 페이지 바뀌었음!');\n    }\n    //temp\n    const dateCellRender = useCallback((value) => {\n      const listData = getListData(value.format('YYYY-MM-DD'));\n      return (\n      <ul style={{paddingInlineStart: '0'}} className=\"events\">\n      {listData.map(item => (\n        <li style={{listStyle: 'none'}} key={item.content}>\n          <Badge status={item.type} text={item.content} />\n        </li>\n      ))}\n    </ul>\n    );\n  }, [calendar]);\n    const onChangeCal = (date, dateString) => {\n      setSelectDate(dateString);\n    }\n    //달력에 추가\n    const onSubmit = useCallback((() => {\n      const plus = { id: 7, date: selectDate, type: 'success', content: text};\n      //임시로 id인덱스 부여, 디비 작업시 id 자동\n      console.log(plus);\n      dispatch({\n        type: ADD_CALENDAR_REQUEST,\n        data: plus,\n      });\n      console.log(calendar);\n    }), [ selectDate, text, calendar]);\n    //달력에 추가한거 삭제\n    const onDelete = useCallback((() => {\n      const deleteData = calendar.filter((e) => e.date === selectDate);\n      console.log(deleteData);\n      /*dispatch({\n        type: REMOVE_CALENDAR_REQUEST,\n        data: {\n          date: selectDate,\n          content: deleteData,\n        },\n      });*/\n    }), [selectDate, calendar,/*tempData*/, text]);\n\n    return(\n        <>\n            <Head>\n                <meta charSet=\"utf-8\"/>\n                <title>Calendar</title>\n            </Head>\n            { isLoggedIn && <AppLayout>\n                <Space direction=\"horizontal\">\n                  <DatePicker style={{marginTop: '10px'}} placeholder={selectDate} onChange={onChangeCal} />\n                </Space>\n                <Input placeholder=\"달력에 기록하세요!\" style={{width: '300px', marginTop: '10px'}} name=\"text\" value={text} type=\"text\" onChange={onChangeText} required />\n                <Button style={{marginTop: '10px'}} onClick={onSubmit}>입력</Button>\n                <Button style={{marginTop: '10px'}} onClick={onDelete}>삭제</Button>\n                <Calendar dateCellRender={dateCellRender} onPanelChange={onPanelChange} onSelect={onSelect}/>\n            </AppLayout>}\n        </>\n    );\n}\n\nexport default AllCalendar;"]},"metadata":{},"sourceType":"module"}