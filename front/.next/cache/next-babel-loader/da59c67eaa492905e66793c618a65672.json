{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(uplodaImages),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addDiary),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddDiary),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(diarySaga);\n\nimport axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_DIARY_REQUEST, ADD_DIARY_SUCCESS, ADD_DIARY_FAILURE, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/diary';\n\nfunction uplodaImagesAPI(data) {\n  return axios.post('/diary/images', data);\n}\n\nfunction uplodaImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uplodaImages$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(uplodaImagesAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addDiaryAPI(data) {\n  return axios.post('/diary', data);\n}\n\nfunction addDiary(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addDiary$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addDiaryAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_DIARY_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: ADD_DIARY_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uplodaImages);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddDiary() {\n  return _regeneratorRuntime.wrap(function watchAddDiary$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_DIARY_REQUEST, addDiary);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function diarySaga() {\n  return _regeneratorRuntime.wrap(function diarySaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchUploadImages), fork(watchAddDiary)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/sol/google/Project/SolarSeed/front/sagas/diary.js"],"names":["uplodaImages","addDiary","watchUploadImages","watchAddDiary","diarySaga","axios","all","fork","put","takeLatest","throttle","call","ADD_DIARY_REQUEST","ADD_DIARY_SUCCESS","ADD_DIARY_FAILURE","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","uplodaImagesAPI","data","post","action","result","type","console","error","response","addDiaryAPI"],"mappings":";;oDAQUA,Y;qDAoBAC,Q;qDAgBAC,iB;qDAIAC,a;qDAIeC,S;;AApDzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,QAArC,EAA+CC,IAA/C,QAA0D,oBAA1D;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,iBAA/C,EAAkEC,qBAAlE,EAAyFC,qBAAzF,EAAgHC,qBAAhH,QAA6I,mBAA7I;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA8B;AAC1B,SAAOd,KAAK,CAACe,IAAN,CAAW,eAAX,EAA4BD,IAA5B,CAAP;AACH;;AAED,SAAUnB,YAAV,CAAuBqB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMV,IAAI,CAACO,eAAD,EAAkBG,MAAM,CAACF,IAAzB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMd,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAEN,qBADA;AAENE,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQK,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMjB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAER,qBADA;AAENU,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeP;AAFhB,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASQ,WAAT,CAAqBR,IAArB,EAA0B;AACtB,SAAOd,KAAK,CAACe,IAAN,CAAW,QAAX,EAAqBD,IAArB,CAAP;AACH;;AAED,SAAUlB,QAAV,CAAmBoB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMV,IAAI,CAACgB,WAAD,EAAcN,MAAM,CAACF,IAArB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMd,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAEV,iBADA;AAENM,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQK,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMjB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAET,iBADA;AAENW,YAAAA,KAAK,EAAE,aAAMC,QAAN,CAAeP;AAFhB,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUjB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACO,qBAAD,EAAwBhB,YAAxB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACG,iBAAD,EAAoBX,QAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACL,iBAAD,CADE,EAENK,IAAI,CAACJ,aAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call} from 'redux-saga/effects';\nimport { ADD_DIARY_REQUEST, ADD_DIARY_SUCCESS, ADD_DIARY_FAILURE, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/diary';\n\nfunction uplodaImagesAPI(data){\n    return axios.post('/diary/images', data);\n}\n\nfunction* uplodaImages(action){\n    try {\n        const result = yield call(uplodaImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction addDiaryAPI(data){\n    return axios.post('/diary', data);\n}\n\nfunction* addDiary(action){\n    try {\n        const result = yield call(addDiaryAPI, action.data);\n        yield put({\n            type: ADD_DIARY_SUCCESS,\n            data: result.data,\n        });\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: ADD_DIARY_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\nfunction* watchUploadImages(){\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uplodaImages);\n}\n\nfunction* watchAddDiary() {\n    yield takeLatest(ADD_DIARY_REQUEST, addDiary);\n}\n\nexport default function* diarySaga() {\n    yield all([\n        fork(watchUploadImages),\n        fork(watchAddDiary),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}